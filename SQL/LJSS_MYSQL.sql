CREATE USER 'LJSS' IDENTIFIED BY 'LJSS';
GRANT ALL PRIVILEGES ON *.* TO 'LJSS' WITH GRANT OPTION;

SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE IF EXISTS TBL_VIEW;
DROP TABLE IF EXISTS TBL_PAYMENT;
DROP TABLE IF EXISTS TBL_EVENT;
DROP TABLE IF EXISTS TBL_QNA;
DROP TABLE IF EXISTS TBL_NOTICE;
DROP TABLE IF EXISTS TBL_PRODUCT;
DROP TABLE IF EXISTS TBL_MEMBER;
DROP TABLE IF EXISTS TBL_CATEGORY;
SET FOREIGN_KEY_CHECKS = 1;

CREATE TABLE TBL_CATEGORY (
  CATE_CODE INT AUTO_INCREMENT PRIMARY KEY,
  CATE_NAME VARCHAR(50) NOT NULL
);

CREATE TABLE TBL_MEMBER (
  MEM_CODE INT AUTO_INCREMENT PRIMARY KEY,
  MEM_ADMIN VARCHAR(1) DEFAULT 'N' NOT NULL,
  MEM_NAME VARCHAR(20),
  MEM_BIRTH VARCHAR(20),
  GENDER VARCHAR(10) CHECK (GENDER IN('M', 'F')),
  MEM_ID VARCHAR(20),
  MEM_PWD VARCHAR(100),
  MEM_PHONE VARCHAR(20),
  MEM_ADRR VARCHAR(100),
  MEM_EMAIL VARCHAR(20),
  MEM_ACC_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  MEM_OUT VARCHAR(1) DEFAULT 'N' NOT NULL
);

CREATE TABLE TBL_PRODUCT (
  PRO_CODE INT AUTO_INCREMENT PRIMARY KEY,
  PRO_NAME VARCHAR(500),
  PRO_PRICE INT,
  CATE_CODE VARCHAR(20),
  PRO_SIZE VARCHAR(10),
  PRO_STOCK INT,
  PRO_ENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRO_STATUS VARCHAR(1) DEFAULT 'Y' NOT NULL,
  PRO_IMG1 VARCHAR(100),
  PRO_IMG2 VARCHAR(100),
  FOREIGN KEY (CATE_CODE) REFERENCES TBL_CATEGORY(CATE_CODE)
);

CREATE TABLE TBL_NOTICE (
  NOTICE_NO INT AUTO_INCREMENT PRIMARY KEY,
  NOTICE_TITLE VARCHAR(100) NOT NULL,
  NOTICE_CONTENT VARCHAR(4000) NOT NULL,
  NOITCE_WRITER VARCHAR(255),
  ORIGIN_NAME VARCHAR(255),
  CHANGE_NAME VARCHAR(255),
  COUNT INT DEFAULT 0,
  CREATE_DATE DATE,
  STATUS VARCHAR(1) DEFAULT 'Y' CHECK (STATUS IN('Y', 'N'))
);

CREATE TABLE TBL_QNA (
  QNA_NO INT AUTO_INCREMENT PRIMARY KEY,
  QNA_TITLE VARCHAR(100) NOT NULL,
  QNA_CONTENT VARCHAR(4000) NOT NULL,
  QNA_WRITER VARCHAR(255),
  ORIGIN_NAME VARCHAR(255),
  CHANGE_NAME VARCHAR(255),
  COUNT INT DEFAULT 0,
  CREATE_DATE DATE,
  STATUS VARCHAR(1) DEFAULT 'Y' CHECK (STATUS IN('Y', 'N'))
);

CREATE TABLE TBL_PAYMENT (
  MEM_CODE INT NOT NULL,
  PRO_CODE INT NOT NULL,
  ORDER_NUM INT AUTO_INCREMENT PRIMARY KEY,
  DELIVERY_STS VARCHAR(20) NOT NULL,
  MEM_ADRR VARCHAR(100) NOT NULL,
  ORDER_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (MEM_CODE) REFERENCES TBL_MEMBER(MEM_CODE),
  FOREIGN KEY (PRO_CODE) REFERENCES TBL_PRODUCT(PRO_CODE)
);

CREATE TABLE TBL_VIEW (
  MEM_CODE INT NOT NULL,
  PRO_CODE INT NOT NULL,
  FOREIGN KEY (MEM_CODE) REFERENCES TBL_MEMBER(MEM_CODE),
  FOREIGN KEY (PRO_CODE) REFERENCES TBL_PRODUCT(PRO_CODE)
);

CREATE TABLE TBL_EVENT (
  EVENT_CODE INT AUTO_INCREMENT PRIMARY KEY,
  EVENT_NAME VARCHAR(50) NOT NULL,
  EVENT_DETAIL VARCHAR(500),
  EVENT_ADD_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  EVENT_PHOTO VARCHAR(100)
);

-- Insert, Drop 및 기타 명령어는 필요에 따라 추가합니다.

INSERT INTO TBL_PRODUCT (PRO_CODE, PRO_NAME, PRO_PRICE, CATE_CODE, PRO_SIZE, PRO_STOCK, PRO_ENT_DATE)
VALUES ('1', '백 포인트 그래픽 스웻셔츠 [다크 브라운]', 150000, '1', 'XL', 100, '2023-12-07');

INSERT INTO TBL_PRODUCT (PRO_CODE, PRO_NAME, PRO_PRICE, CATE_CODE, PRO_SIZE, PRO_STOCK, PRO_ENT_DATE)
VALUES ('2', '백 포인트 그래픽 스웻셔츠 [다크 브라운]', 150000, '2', 'XL', 100, '2023-12-07');

##########################################################

INSERT INTO TBL_NOTICE (NOTICE_TITLE, NOTICE_CONTENT, NOITCE_WRITER, ORIGIN_NAME, CHANGE_NAME, COUNT, CREATE_DATE, STATUS) 
VALUES('첫번째 게시판 서비스를 시작하겠습니다.', '안녕하세요. 첫 게시판입니다.','admin','','', 0, '2019-12-10', 'Y');

INSERT INTO TBL_NOTICE (NOTICE_TITLE, NOTICE_CONTENT, NOITCE_WRITER, ORIGIN_NAME, CHANGE_NAME, COUNT, CREATE_DATE, STATUS) 
VALUES('두번째 게시판 서비스를 시작하겠습니다.', '안녕하세요. 2 게시판입니다.','admin','','', 0, '2020-03-20', 'Y');

-- 나머지 INSERT 구문도 이와 유사하게 작성합니다.

COMMIT;

